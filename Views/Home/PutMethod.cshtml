
@{
    ViewData["Title"] = "PutMethod";
}

<h2>PUT Method</h2>
<a href="javascript:history.back();">Go to previous</a>
<div class="code">
    We simply assume that the Web API <b>PUT</b> method conforms to Microsofts philosophy regarding <b>REST</b> webservice methods.
    PUT is for Edit, here update of a current Employee object.
    Like this:
</div>
<div class="code frame">
    // PUT: api/Employee/5
    [HttpPut("{id}")]
    public void Put(int id, [FromBody] Employee Emp)
</div>
<div class="code">So we can write the MVC Controller method as follows:</div>
<div class="code frame">
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Logging;
    using MyAspNetCoreApplication.Models;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using Newtonsoft.Json;

    //<b>PUT</b> Corresponds to <b>Edit(Update)</b> of an Employee object.
    public async Task<ActionResult>
        Edit(int id)
        {
        Employee emp = null;

        using (var client = new HttpClient())
        {
        var MainUrl = "http://" + HttpContext.Request.Host.Value;
        client.BaseAddress = new Uri(MainUrl + "/api/employee");

        HttpResponseMessage Res = await client.GetAsync("Employee/" + id.ToString());

        if (Res.IsSuccessStatusCode)
        {
        var EmpResponse = Res.Content.ReadAsStringAsync().Result;
        //Deserializing the response recieved from web api and storing into the Employee object
        emp = JsonConvert.DeserializeObject<Employee>
            (EmpResponse);
            }
            }
            return View(emp);
            }

</div>

