@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<h2>How to implement EF Core</h2>
<div class="code">
    Implementing EF in the .NET CORE environment it a little bit different from .NET Framework.
    You start by installing EF CORE by using Nuget package Manager, <b>Microsoft.EntityFrameworkCore.SqlServer.</b>
    In the Startup.cs ensure that the using statement <b>using Microsoft.EntityFrameworkCore;</b> is written.

    In the Models folder create a class which represents an exact copy of the SQL Table.
    You can add classes in this folder for all tables involved in your project.
</div>
<div class="code frame">
    public partial class Employee
    {
        public int ID { get; set; }
        [Required]
        public int WorkNo { get; set; }
        public string Name { get; set; }
        .
        .
        .
    }
</div>


<div class="code">Following line should be added in the <b>appsettings.json</b></div>
<div class="code frame">
    {
        .
        .
        .
        <b>
            "ConnectionStrings": {
            "FpcDb": "data source=JO-LENOVO\\SQL2014;initial catalog=FPC_DB;integrated security=True;"
            }
        </b>
    }
</div>
<div class="code">
    Create a <b>Data</b> folder in your project and add the following file called <b>FPC_Emp_Context.cs</b> with this code:
</div>
<div class="code frame">
    using Microsoft.EntityFrameworkCore;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using MyCoreMvc.Models;


    namespace MyCoreMvc.Data
    {
        public class FPC_Emp_Context: DbContext
        {
            public FPC_Emp_Context(DbContextOptions<FPC_Emp_Context>  options) : base(options)
            {
            }
            public DbSet&lt;Employee&gt; FPC_Employees { get; set; }
        }
     }
</div>

<div class="code">Add following code in startup.cs :</div>
<div class="code frame">
    public void ConfigureServices(IServiceCollection services)
    {
        .
        .
        .
        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        <b>services.AddDbContext&lt;FPC_Emp_Context&gt;(options => options.UseSqlServer(Configuration.GetConnectionString("FpcDb")));</b>
    }
</div>
<div class="code">

    in a given Controller the following could be implemented in the Controller class itself and in the constructor:
</div>
<div class="code frame">
    public class HomeController : Controller
    {
        private readonly FPC_Emp_Context <b>_Efcontext</b>;

        public HomeController(FPC_Emp_Context <b>context</b>)
        {
            <b>_Efcontext</b> = context;
        }
        .
        .
        .
    }
</div>
<div class="code">In another place in the controller class you can use EF this way:</div>
<div class="code frame">
    using Microsoft.EntityFrameworkCore;
    using MyCoreMvc.Data;
    using MyCoreMvc.Models;
    <b>//Ensure that the above namespaces are referred to in your Controller class.</b>

    public async Task<IActionResult> Index()
    {
         <b>return View(await _Efcontext.FPC_Employees.ToListAsync());</b>
    }

</div>

@{
}
