@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<h2>Ajax BeginForm Explained</h2>
<div>
    <div class="code">
        <b>This example is very simple and can be found here on the website, you can try this one :</b>
        <a href="~/AjaxFun/index">Ajax fun</a><br/>
        Ensure that "jquery.unobtrusive-ajax.js" is downoaded to the project and implemented.
        So that they represented in the following order:
    </div>
    <div class="code frame">
        &lt;script src="~/Scripts/jquery-1.10.2.min.js"&gt;&lt;/script&gt;
        &lt;script src="~/Scripts/jquery.unobtrusive-ajax.min.js"&gt;&lt;/script&gt;
    </div>
    <div>Start by creating two controller methods as here. (notice that they return JSON strings...)</div>

    <div class="code frame">
        [HttpPost]
        public ActionResult AjaxPost1(string Name)
        {
             return Json("Good name you got there, "+ Name );
        }

        [HttpPost]
        public ActionResult AjaxPost2(string Occupation)
        {
            return Json("Congratulation with your job as " + Occupation);
        }
    </div>
    <div class="code">
        Notice the names of the two methods.
        Add following code to the respective cshtml file:
    </div>
    <div class="code frame">

        &lt;form asp-controller="AjaxFun" asp-action="AjaxPost1" data-ajax-complete="onComplete" data-ajax-success="OnSuccess" 
                                                 data-ajax-failure="OnFailure" <b>data-ajax="true"</b> data-ajax-method="POST"&gt;
            @@Html.Label("Enter Your Name")
            &lt;br /&gt;
            @@Html.TextBox("Name", null, new { @@class = "form-control col-md-2" })
            &nbsp;
            &lt;span&gt;Simply press the ENTER button or click the button after typing the name.&lt;/span&gt;
            &lt;br /&gt;
            &lt;hr /&gt;
            &lt;button id="btnSubmit" type="submit" class="btn btn-primary"&gt;Comment on Name&lt;/button&gt;
        &lt;/form&gt;
        &lt;div id="div1"&gt;&nbsp;&lt;/div&gt;
        &lt; br /&gt;
        &lt;form asp-controller="AjaxFun" asp-action="AjaxPost2" data-ajax-complete="onComplete" data-ajax-success="OnSuccess1"
                    data-ajax-failure="OnFailure" <b>data-ajax="true"</b> data-ajax-method="POST"&gt;
            @@Html.Label("Enter Your occupation")
            &lt;br /&gt;
            @@Html.TextBox("Occupation", null, new { @@class = "form-control col-md-2" })
            &nbsp;
            &lt;span&gt;Simply press the ENTER button or click the button  after typing the name.&lt;/span&gt;
            &lt;br /&gt;
            &lt;hr /&gt;
            &lt;button id="btnSubmit" type="submit" class="btn btn-primary"&gt;Comment on Occupation&lt;/button&gt;
        &lt;/form&gt;
    </div>
    <div class="code">
    The bold text, <b>data-ajax=true</b> is the keypoint to make it Ajax-oriented.
    As you can see there are two AJAX beginform on the page referring to the method names in the controller.
    Notice the Controller name, "Ajaxfun" and the AjaxOptions events, "Onsuccess" and "Onfailure".
    We only need to create the return events in the cshtml file;
</div>
    <div class="code frame">
        function OnSuccess(data) {
            $("#div1").html(data);
        }
        function OnSuccess1(data) {
            $("#div2").html(data);
        }
        function OnFailure(data) {
            alert(data);
        }
    </div>
</div>

@{
}
