
@{
    ViewData["Title"] = "PostMethod";
}

<h2>POST Method</h2>
<a href="javascript:history.back();">Go to previous</a>
<div class="code">
    We simply assume that the Web API <b>POST</b> method conforms to Microsoft philosophy ragarding REST webservice methods.
    POST is for creating a new Employee object
    Like this:
</div>
<div class="code frame">
    // POST: api/Employee
    [HttpPost]
    public void Post([FromBody] Employee Emp)
</div>
<div class="code">So we can write the MVC Controller method as follows:</div>
<div class="code frame">
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Logging;
    using MyAspNetCoreApplication.Models;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using Newtonsoft.Json;

    //<b>POST</b> Corresponds to <b>add a new</b> item of an Employee object.
    [HttpPost]
    public async Task<ActionResult>
        Create(Employee employee)
        {
        Employee emp = null;
        using (var client = new HttpClient())
        {
        var MainUrl = "http://" + HttpContext.Request.Host.Value;
        client.BaseAddress = new Uri(MainUrl + "/api/employee");

        //HTTP POST
        HttpResponseMessage Res = await client.PostAsJsonAsync("Employee", employee);
        if (Res.IsSuccessStatusCode)
        {
        var EmpResponse = Res.Content.ReadAsStringAsync().Result;
        //Deserializing the response recieved from web api and storing into the Employee object
        return RedirectToAction("Created");
        }
        }
        return View();
        }
</div>
